// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String    @id @default(cuid())
  username   String    @unique
  password   String
  role       Role      @default(USER)
  orders     Order[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Account    Account[]
  Session    Session[]
}

model Driver {
  id          String  @id @default(cuid())
  motherboard String
  gpu         String
  chipset     String
  audio       String
  lan         String
  Order       Order?  @relation(fields: [orderId], references: [id])
  orderId     String?
}

model Order {
  id              String   @id @default(cuid())
  user_id         String
  user            User     @relation(fields: [user_id], references: [id])
  article         String   @db.Text
  equipment       String   @db.Text
  production_date String   @db.Text
  warranty_period String   @db.Text
  serial_number   String
  Driver          Driver[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@unique([serial_number])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
